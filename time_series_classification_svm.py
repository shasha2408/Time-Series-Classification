# -*- coding: utf-8 -*-
"""Time series classification SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmvkKiDdZMSIHcXrVRmGDvvisTI-ZrDK
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report 

# Tinme series classification using Support Vector Machine

def TS_SVM(train,test):

   # information of train and test set

  def dataset_stats(train,test):
    train.info()
    test.info()
    return

   # spliting the train and test data in inputs and outputs. 

    def train_test_split(train,test):  
       x_train = train.iloc[:,1:]
       y_train = train.iloc[:,0]
       x_test = test.iloc[:,1:]
       y_test = test.iloc[:,0]
       print("x_train Shape :: ", x_train.shape)
       print("y_train Shape :: ", y_train.shape)
       print("x_test Shape :: ", x_test.shape)
       print("y_test Shape :: ", y_test.shape)
       return  x_train,x_test,y_train,y_test

    # data scaling of Train nd test variables

       def data_scaling(x_train,x_test):
        scaler = StandardScaler()
        x_train_scaled = scaler.fit_transform(x_train)
        x_test_scaled  = scaler.fit_transform(x_test)

        return x_train_scaled,x_test_scaled

      # Model Building and Training

        def Svm_classifier(x_train,y_train ):
            from sklearn import svm
            clf = svm.SVC()
            clf.fit(x_train, y_train)       
            return clf

            #Nodel Evaluation with Test data

            def evaluation(y_test,predictions):
               acc_test = accuracy_score(y_test, predictions)
               print('Test Accuracy: %.2f' % acc_test)
               print(classification_report(y_test, predictions)),
               cm=metrics.confusion_matrix(y_test,predictions)
               ax= plt.figure(figsize=(8,4))
               ax= plt.subplot()
               ax.set_xlabel('Predicted class');ax.set_ylabel('True class'); 
               ax.set_title('Confusion Matrix for SVM'); 
               sns.heatmap(cm, annot=True, fmt='g', ax=ax); 
               ax.xaxis.set_ticklabels(['Normal', 'Abnormal']); ax.yaxis.set_ticklabels(['Normal', 'Abnormal']);
               plt.show()
               return

               def cross_valid(clf, x_train_scaled,y_train):
                 from sklearn.model_selection import cross_validate
                 scores = cross_validate(clf,x_train_scaled,y_train, cv=5, scoring=['accuracy'], return_train_score=True)
                 print('Train accuracy: ', scores['train_accuracy'])
                 print('Test accuracy: ', scores['test_accuracy'])
                 return
                
    return

